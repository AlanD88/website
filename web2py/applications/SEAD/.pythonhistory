print db.tables
import datetime
db.define_table('device_usage',
                Field('time', 'datetime'),
                Field('tv_bedroom', default=False),
                Field('light_bedroom', default=False),
                Field('desktop_bedroom', default=False),
                Field('ac_bedroom', default=False),
                Field('freezer_kitchen', default=False),
                Field('fridge_kitchen', default=False),
                Field('toaster_kitchen', default=False),
                Field('microwave_kitchen', default=False),
                Field('desktop_office', default=False),
                Field('lights_office', default=False),
                Field('ipad_office', default=False),
                Field('shredder_office', default=False),
                Field('light_bathroom', default=False),
                Field('hairdryer_bathroom', default=False),
                Field('shaver_bathroom', default=False),
                Field('tv_livingroom', default=False),
                Field('xbox_livingroom', default=False),
                Field('soundsystem_livingroom', default=False),
                Field('light_livingroom', default=False),
                )
db=SQLDB('sqlite://storage.db')
print db._dbname
print db._url
db.define_table('device_usage', SQLFIELD('name'))
db.define_table('device_usage', SQLField('name'))
print db.tables
db.device_usage.drop()
print db.tables
db.define_table('device_usage',
                Field('time', 'datetime'),
                Field('tv_bedroom', default=False),
                Field('light_bedroom', default=False),
                Field('desktop_bedroom', default=False),
                Field('ac_bedroom', default=False),
                Field('freezer_kitchen', default=False),
                Field('fridge_kitchen', default=False),
                Field('toaster_kitchen', default=False),
                Field('microwave_kitchen', default=False),
                Field('desktop_office', default=False),
                Field('lights_office', default=False),
                Field('ipad_office', default=False),
                Field('shredder_office', default=False),
                Field('light_bathroom', default=False),
                Field('hairdryer_bathroom', default=False),
                Field('shaver_bathroom', default=False),
                Field('tv_livingroom', default=False),
                Field('xbox_livingroom', default=False),
                Field('soundsystem_livingroom', default=False),
                Field('light_livingroom', default=False),
                )
db.tables
db.device_usage
db.device_usage.insert(time="05/09/1996")
db.device_usage.ALL.first()
db.device_usage.first()
db.device_usage.select().first()
print db.device_usage.fields
db().select(db.device_usage.ALL)
datetime.now
datetime.now()
datetime.datetime.now()
now = datetime.datetime.now()
now
tomo = now + datetime.timedelta(days=1)
tomo
nexsec = now+ datetime.timedelta(minutes=1)
nexsec
db(db.device_usage.time = "05/09/1996").select()
db(db.device_usage.time == "05/09/1996").select()
db.device_usage.drop()
db.define_table('device_usage',
                Field('time', 'datetime'),
                Field('tv_bedroom', default=False),
                Field('light_bedroom', default=False),
                Field('desktop_bedroom', default=False),
                Field('ac_bedroom', default=False),
                Field('freezer_kitchen', default=False),
                Field('fridge_kitchen', default=False),
                Field('toaster_kitchen', default=False),
                Field('microwave_kitchen', default=False),
                Field('desktop_office', default=False),
                Field('lights_office', default=False),
                Field('ipad_office', default=False),
                Field('shredder_office', default=False),
                Field('light_bathroom', default=False),
                Field('hairdryer_bathroom', default=False),
                Field('shaver_bathroom', default=False),
                Field('tv_livingroom', default=False),
                Field('xbox_livingroom', default=False),
                Field('soundsystem_livingroom', default=False),
                Field('light_livingroom', default=False),
                )
db.device_usage.insert(time=now)
print db._tables
print db.device_usage.dields
print db.device_usage.fields
print db.device_usage.time
db(db.device_usage.time == now).select(0
)
db(db.device_usage.time == now).select()
row = db(db.device_usage.time == now).select()
row
print row
import random
random.choice([True, False])
db.device_usage.insert(tv_bedroom=random.choice([True, False])
db(db.device_usage.ALL).select()
db(db.device_usage.ALL)
db().select(db.device_usage.ALL)
print db().select(db.device_usage(.ALL)
print db().select(db.device_usage.ALL)
for i in range(0,10):
db.device_usage.insert(tv_bedroom=random.choice([True, False]))
for i in range(0,10):
     db.device_usage.insert(tv_bedroom=random.choice([True, False]))
print db().select(db.device_usage.ALL)
db.device_usage.insert(tv_bedroom=random.choice([True, False]))
for i in range(0,100):
    db.device_usage.insert( 
                        tv_bedroom=random.choice([True, False]),
                        light_bedroom=random.choice([True, False]),
                        desktop_bedroom=random.choice([True, False]),
                        ac_bedroom=random.choice([True, False]),
                        freezer_kitchen=random.choice([True, False]),
                        fridge_kitchen=random.choice([True, False]),
                        toaster_kitchen=random.choice([True, False]),
                        microwave_kitchen=random.choice([True, False]),
                        desktop_office=random.choice([True, False]),
                        lights_office=random.choice([True, False]),
                        ipad_office=random.choice([True, False]),
                        shaver_bathroom = random.choice([True, False]),
                        light_bathroom = random.choice([True, False]),
                        hairdryer_bathroom = random.choice([True, False]),
                        shaver_bathroom = random.choice([True, False]),
                        tv_livingroom = random.choice([True, False]),
                        xbox_livingroom = random.choice([True, False]),
                        soundsystem_livingroom = random.choice([True, False]),
                        light_livingroom = random.choice([True, False]),)
quit()
import DAL
db = DAL('sqlite://storage.sqlite')
db
db.define_table('device_usage',
                Field('use_time', 'datetime'),
                Field('tv_bedroom', default=False),
                Field('light_bedroom', default=False),
                Field('desktop_bedroom', default=False),
                Field('ac_bedroom', default=False),
                Field('freezer_kitchen', default=False),
                Field('fridge_kitchen', default=False),
                Field('toaster_kitchen', default=False),
                Field('microwave_kitchen', default=False),
                Field('desktop_office', default=False),
                Field('lights_office', default=False),
                Field('ipad_office', default=False),
                Field('shredder_office', default=False),
                Field('light_bathroom', default=False),
                Field('hairdryer_bathroom', default=False),
                Field('shaver_bathroom', default=False),
                Field('tv_livingroom', default=False),
                Field('xbox_livingroom', default=False),
                Field('soundsystem_livingroom', default=False),
                Field('light_livingroom', default=False)
                )
db.device_usage()
db.device_usage.fields(
)
import datetime
x = datetime.datetime(2015, 1,1 )
x
x = datetime.datetime(2015, 1, 1, 0, 0)
x
x + datetime.timedelta(days=1)
x + datetime.timedelta(minutes=1)
x
datetime.datetime(2016,12,31,23,59) - x 
y = datetime.datetime(2016,12,31,23,59)
y
x-y
(y-x).days
(y-x).minutes
(y-x).minute
(y-x).min
y == y
x.days
x.day
x
(y-x)
(y-x).days
(y-x).min
(x
)
x
x + timedelta(min=1)
x + timedelta(minutes=1)
x + timedelta(minute=1)
x + datetime.timedelta(minute=1)
x + datetime.timedelta(minutes=1)
x
x + datetime.timedelta(minutes=365*24*60)
x + datetime.timedelta(minutes=365*24*60-1)
x + datetime.timedelta(minutes=365*24*60*2)
x + datetime.timedelta(minutes=365*24*60*2db.define_table('data',)
                Field('use_time', 'datetime'),
                Field('room', 'text'),
                Field('device', 'text'),
                Field('on', 'integer')
                )
db.define_table('data',
                Field('use_time', 'datetime'),
                Field('room', 'text'),
                Field('device', 'text'),
                Field('on', 'integer')
                )
db.define_table('data',
                Field('use_time', 'datetime'),
                Field('room', 'text'),
                Field('device', 'text'),
                Field('on_off', 'integer')
                )
db.define_table('data',
                Field('use_time', 'datetime'),
                Field('room', 'text'),
                Field('device', 'text'),
                Field('on_off', 'integer')
                )
db.data
room = {
    'bedroom': ['tv', 'light', 'desktop', 'ac'],
    'kitchen': ['freezer', 'fridge', 'toaster', 'microwave', 'light'],
    'office': ['desktop', 'light', 'ipad', 'shredder'],
    'bathroom': ['light', 'hairdryer', 'shaver'],
    'livingroom': ['tv', 'xbox', 'soundsystem', 'light'],
}
room
for i in range(0,1440):
;
room.bedroom
room.['bedroom']
room['bedroom']
room['bedroom'][0]
room = {
    'bedroom': {'tv': [30, 4],  #possibility to be on, on for how long
                'light': [60, 5],
                'desktop': [60, 2],
                'ac': [20, 8],
                },
    'kitchen': {'freezer': [100, 24],
                'fridge': [100, 24],
                'toaster': [2, 0.2],
                'microwave': [5, 0.5],
                'light': [40, 4],
                },
    'office': {'desktop': [40, 3],
                'light': [40, 7],
                'ipad': [20, 2],
                'shredder': [3, 0.5],
               },
    'bathroom': {'light': [10, 0.5], 
                 'hairdryer': [5, 0.5], 
                 'shaver': [5, 0.5],
                 },
    'livingroom': { 'tv': [20, 4],
                    'xbox': [40, 4], 
                    'soundsystem': [50, 5], 
                    'light': [70,4],
                    },
}
room
room.bathroom
room['bathroom'].
for i in room['bathroom']:
    print(i)
for i in room:
    print(i)
import random
random.random()
random.seed(1)
random.random()
random.seed(1)
random.random()
x
y
y>x
x>y
2/3
3/2
3//2
3.0/2
ls
room
bedtv = room['bedroom']['tv']
bedtv
for i in range(0, 24*60/bedtv[1]): #a day / time chunk
    now = now + datetime.timedelta(minutes=bedtv[1]*i)
    if random.random()*100 < bedtv[0]: # > is off, < is on
        for j in (0, bedtv[1]*60): #timechunk to minutes
            db.data.insert(use_time=now + datetime.timedelta(minutes=j),
                           room='bedroom',
                           device='tv',
                           on_off=1)
now = datetime.datetime(2015,1,1,0,0)
for i in range(0, 24*60/bedtv[1]): #a day / time chunk
    now = now + datetime.timedelta(minutes=bedtv[1]*i)
    if random.random()*100 < bedtv[0]: # > is off, < is on
        for j in (0, bedtv[1]*60): #timechunk to minutes
            db.data.insert(use_time=now + datetime.timedelta(minutes=j),
                           room='bedroom',
                           device='tv',
                           on_off=1)
bedtv[1]
24*60/4
bedtv[0]
db.data
db(db.data.room == 'bedroom').select()
tmp = db(db.data.room == 'bedroom').select()
tmp
print(tmp)
db(db.data.room == 'bedroom').delete()
db.data
db.data.ALL
print(db.data.ALL)
print(db(db.data.ALL))
print(db(db.data.ALL).select())
print(db(db.data).select())
for i in range(0, 24*60/bedtv[1]): #a day / time chunk
    now = now + datetime.timedelta(minutes=bedtv[1]*i)
    if random.random()*100 < bedtv[0]: # > is off, < is on
        for j in (0, bedtv[1]*60): #timechunk to minutes
            db.data.insert(use_time=now + datetime.timedelta(minutes=j),
                           room='bedroom',
                           device='tv',
                           on_off=1)
print(db(db.data).select())
db.data.drop()
db.data
db.define_table('data',
                Field('use_time', 'datetime'),
                Field('room', 'text'),
                Field('device', 'text'),
                Field('on_off', 'integer')
                )
for i in range(0, 265*24*60/bedtv[1]): #a day / time chunk
    now = now + datetime.timedelta(minutes=bedtv[1]*i)
    if random.random()*100 < bedtv[0]: # > is off, < is on
        for j in (0, bedtv[1]*60): #timechunk to minutes
            db.data.insert(use_time=now + datetime.timedelta(minutes=j),
                           room='bedroom',
                           device='tv',
                           on_off=1)
print(db(db.data.ALL).select())
print(db(db.data).select())
db.data.drop()]
db.data.drop()
db.define_table('data',
                Field('use_time', 'datetime'),
                Field('room', 'text'),
                Field('device', 'text'),
                Field('on_off', 'integer')
                )
start = datetime.datetime(2015,1,1,0,0)
now = start
now
db.data
for i in range(0, 24*60/bedtv[1]): #a day / time chunk
    now = now + datetime.timedelta(minutes=bedtv[1]*60*i)
    if random.random()*100 < bedtv[0]: # > is off, < is on
        for j in (0, bedtv[1]*60): #timechunk to minutes
            db.data.insert(use_time=now + datetime.timedelta(minutes=j),
                           room='bedroom',
                           device='tv',
                           on_off=1)
db(db.data.room == 'bedroom').select()
tmp = db(db.data.room == 'bedroom').select()
tmp
print(tmp)
for i in range(0, 24*60/bedtv[1]): #a day / time chunk
    now = now + datetime.timedelta(minutes=bedtv[1]*60*i)
    if random.random()*100 < bedtv[0]: # > is off, < is on
        for j in (0, bedtv[1]*60): #timechunk to minutes
            print('here')
            db.data.insert(use_time=now + datetime.timedelta(minutes=j),
                           room='bedroom',
                           device='tv',
                           on_off=1)
for i in range(0, 24*60/bedtv[1]): #a day / time chunk
    now = now + datetime.timedelta(minutes=bedtv[1]*60*i)
    if random.random()*100 < bedtv[0]: # > is off, < is on
        print('here----------------------')
        for j in (0, bedtv[1]*60): #timechunk to minutes
            db.data.insert(use_time=now + datetime.timedelta(minutes=j),
                           room='bedroom',
                           device='tv',
                           on_off=1)
for i in range(0, 24*60/bedtv[1]): #a day / time chunk
    now = now + datetime.timedelta(minutes=bedtv[1]*60*i)
    if random.random()*100 < bedtv[0]: # > is off, < is on
        print('here----------------------')
        for j in (0, bedtv[1]*60): #timechunk to minutes
            print(j)
            db.data.insert(use_time=now + datetime.timedelta(minutes=j),
                           room='bedroom',
                           device='tv',
                           on_off=1)
bedtv[1]*60
for j in range(bedtv[1]*60):
    print(j)
for i in range(0, 24*60/bedtv[1]): #a day / time chunk
    now = now + datetime.timedelta(minutes=bedtv[1]*60*i)
    if random.random()*100 < bedtv[0]: # > is off, < is on
        print('here----------------------')
        for j in (0, bedtv[1]*60): #timechunk to minutes
            print(j)
for i in range(0, 24*60/bedtv[1]): #a day / time chunk
    now = now + datetime.timedelta(minutes=bedtv[1]*60*i)
    if random.random()*100 < bedtv[0]: # > is off, < is on
        # print('here----------------------')
        for j in (0, bedtv[1]*60): #timechunk to minutes
            print(j)
for i in range(0, 24*60/bedtv[1]): #a day / time chunk
    now = now + datetime.timedelta(minutes=bedtv[1]*60*i)
    if random.random()*100 < bedtv[0]: # > is off, < is on
        # print('here----------------------')
        for j in (0, bedtv[1]*60): #timechunk to minutes
            print(j)
for i in range(0, 24*60/bedtv[1]): #a day / time chunk
    now = now + datetime.timedelta(minutes=bedtv[1]*60*i)
    if random.random()*100 < bedtv[0]: # > is off, < is on
        # print('here----------------------')
        for j in (0, 240): #timechunk to minutes
            print(j)
for i in range(0, 24*60/bedtv[1]): #a day / time chunk
    now = now + datetime.timedelta(minutes=bedtv[1]*60*i)
    if random.random()*100 < bedtv[0]: # > is off, < is on
        # print('here----------------------')
        for j in (0, 240): #timechunk to minutes
            print(j)
    if random.random()*100 < bedtv[0]: # > is off, < is on
        # print('here----------------------')
        for j in (0, bedtv[1]*60): #timechunk to minutes
            print(j)
    if random.random()*100 < bedtv[0]: # > is off, < is on
        # print('here----------------------')
        for j in (0, bedtv[1]*60): #timechunk to minutes
            print(j)
    if random.random()*100 < bedtv[0]: # > is off, < is on
        # print('here----------------------')
        for j in (0, bedtv[1]*60): #timechunk to minutes
if random.random()*100<bedtv[0]:
    for j in ()
db.data.drop()
db.define_table('data',
                Field('use_time', 'datetime'),
                Field('room', 'text'),
                Field('device', 'text'),
                Field('on_off', 'integer')
                )
now
now = start
now
for i in range(0, 24*60/bedtv[1]): #a day / time chunk
    now = now + datetime.timedelta(minutes=bedtv[1]*60*i)
    if random.random()*100 < bedtv[0]: # > is off, < is on
        for j in range(0, bedtv[1]*60): #timechunk to minutes
            print(j)
            db.data.insert(use_time=now + datetime.timedelta(minutes=j),
                           room='bedroom',
                           device='tv',
                           on_off=1)
db(db.data.room == 'bedroom').select()
tmp = db(db.data.room == 'bedroom').select()
tmp
print(tmp[0:100])
print(tmp[0:1000])
print(tmp[-1000:])
for i in range(0, 24*60/bedtv[1]): #a day / time chunk
    if random.random()*100 < bedtv[0]: # > is off, < is on
        for j in range(0, bedtv[1]*60): #timechunk to minutes
            db.data.insert(use_time=now + datetime.timedelta(minutes=j),
                           room='bedroom',
                           device='tv',
                           on_off=1)
    now = now + datetime.timedelta(minutes=bedtv[1] * 60)
db.data.drop()
db
db.define_table('data',
                Field('use_time', 'datetime'),
                Field('room', 'text'),
                Field('device', 'text'),
                Field('on_off', 'integer')
                )
ls
now = start
for i in range(0, (24*60)/(bedtv[1]*60) ): #a day / time chunk
    if random.random()*100 < bedtv[0]: # > is off, < is on
        for j in range(0, bedtv[1]*60): #timechunk to minutes
            db.data.insert(use_time=now + datetime.timedelta(minutes=j),
                           room='bedroom',
                           device='tv',
                           on_off=1)
    now = now + datetime.timedelta(minutes=bedtv[1] * 60)
for i in range(0, (365*24*60)/(bedtv[1]*60) ): #a day / time chunk
    if random.random()*100 < bedtv[0]: # > is off, < is on
        for j in range(0, bedtv[1]*60): #timechunk to minutes
            db.data.insert(use_time=now + datetime.timedelta(minutes=j),
                           room='bedroom',
                           device='tv',
                           on_off=1)
    now = now + datetime.timedelta(minutes=bedtv[1] * 60)
tmp = db(db.data.room == 'bedroom').select()
print(tmp[-1000:])
db.data.drop()
db.define_table('data',
                Field('use_time', 'datetime'),
                Field('room', 'text'),
                Field('device', 'text'),
                Field('on_off', 'integer')
                )
now = start
room = rooms['bedroom']
for dev in two_dev:
    for i in range(0, (24*60)/(room[dev][1]*60) ): #a day / time chunk
        if random.random()*100 < dev[0]: # > is off, < is on
            for j in range(0, room[dev][1]*60): #timechunk to minutes
                db.data.insert(use_time=now + datetime.timedelta(minutes=j),
                               room='bedroom',
                               device=dev,
                               on_off=1)
        now = now + datetime.timedelta(minutes=bedtv[1] * 60)
two_dev = ['tv', 'light']
room = rooms['bedroom']
for dev in two_dev:
    for i in range(0, (24*60)/(room[dev][1]*60) ): #a day / time chunk
        if random.random()*100 < dev[0]: # > is off, < is on
            for j in range(0, room[dev][1]*60): #timechunk to minutes
                db.data.insert(use_time=now + datetime.timedelta(minutes=j),
                               room='bedroom',
                               device=dev,
                               on_off=1)
        now = now + datetime.timedelta(minutes=bedtv[1] * 60)
room = rooms['bedroom']
for dev in two_dev:
    for i in range(0, (24*60)/(room[dev][1]*60) ): #a day / time chunk
        if random.random()*100 < dev[0]: # > is off, < is on
            for j in range(0, room[dev][1]*60): #timechunk to minutes
                db.data.insert(use_time=now + datetime.timedelta(minutes=j),
                               room='bedroom',
                               device=dev,
                               on_off=1)
        now = now + datetime.timedelta(minutes=bedtv[1] * 60)
room = rooms['bedroom']
for dev in two_dev:
    for i in range(0, (24*60)/(room[dev][1]*60) ): #a day / time chunk
        if random.random()*100 < room[dev][0]: # > is off, < is on
            for j in range(0, room[dev][1]*60): #timechunk to minutes
                db.data.insert(use_time=now + datetime.timedelta(minutes=j),
                               room='bedroom',
                               device=dev,
                               on_off=1)
        now = now + datetime.timedelta(minutes=room[dev][1] * 60)
rooms = {
    'bedroom': {'tv': [30, 4],  #possibility to be on, on for how long
                'light': [60, 5],
                'desktop': [60, 2],
                'ac': [20, 8],
                },
    'kitchen': {'freezer': [100, 24],
                'fridge': [100, 24],
                'toaster': [2, 0.2],
                'microwave': [5, 0.5],
                'light': [40, 4],
                },
    'office': {'desktop': [40, 3],
                'light': [40, 7],
                'ipad': [20, 2],
                'shredder': [3, 0.5],
               },
    'bathroom': {'light': [10, 0.5],
                 'hairdryer': [5, 0.5],
                 'shaver': [5, 0.5],
                 },
    'livingroom': { 'tv': [20, 4],
                    'xbox': [40, 4],
                    'soundsystem': [50, 5],
                    'light': [70,4],
                    },
}
room = rooms['bedroom']
room
for dev in two_dev:
    for i in range(0, (24*60)/(room[dev][1]*60) ): #a day / time chunk
        if random.random()*100 < room[dev][0]: # > is off, < is on
            for j in range(0, room[dev][1]*60): #timechunk to minutes
                db.data.insert(use_time=now + datetime.timedelta(minutes=j),
                               room='bedroom',
                               device=dev,
                               on_off=1)
        now = now + datetime.timedelta(minutes=room[dev][1] * 60)
tmp = db(db.data.room == 'kitchen').select()
tmp
tmp = db(db.data.device == 'light').select()
tmp
print(tmp)
tmp = db(db.data.device == 'tv').select()
print(tmp)
db.data.drop()
db.define_table('data',
                Field('use_time', 'datetime'),
                Field('room', 'text'),
                Field('device', 'text'),
                Field('on_off', 'integer')
                )
rooms = {
    'bedroom': {'tv': [30, 4],  #possibility to be on, on for how long
                'light': [60, 5],
                'desktop': [60, 2],
                'ac': [20, 8],
                },
    'kitchen': {'freezer': [100, 24],
                'fridge': [100, 24],
                'toaster': [2, 0.2],
                'microwave': [5, 0.5],
                'light': [40, 4],
                },
    'office': {'desktop': [40, 3],
                'light': [40, 7],
                'ipad': [20, 2],
                'shredder': [3, 0.5],
               },
    'bathroom': {'light': [10, 0.5],
                 'hairdryer': [5, 0.5],
                 'shaver': [5, 0.5],
                 },
    'livingroom': { 'tv': [20, 4],
                    'xbox': [40, 4],
                    'soundsystem': [50, 5],
                    'light': [70,4],
                    },
}
rooms
db.data
now = start
hour = 24
for room in rooms:
    for dev in room:
        now = start
        for i in range(0, (hour * 60) / (room[dev][1] * 60)):  # a day / time chunk
            if random.random()*100 < room[dev][0]: # > is off, < is on
                for j in range(0, room[dev][1]*60): #timechunk to minutes
                    db.data.insert(use_time=now + datetime.timedelta(minutes=j),
                                   room='bedroom',
                                   device=dev,
                                   on_off=1)
            now = now + datetime.timedelta(minutes=room[dev][1] * 60)
for room in rooms:
    print(room)
    for dev in rooms:
;
now = start
hour = 24
for room in rooms:
    for dev in rooms[room]:
        now = start
        for i in range(0, (hour * 60) / (rooms[room][dev][1] * 60)):  # a day / time chunk
            if random.random()*100 < rooms[room][dev][0]: # > is off, < is on
                for j in range(0, rooms[room][dev][1]*60): #timechunk to minutes
                    db.data.insert(use_time=now + datetime.timedelta(minutes=j),
                                   room='bedroom',
                                   device=dev,
                                   on_off=1)
            now = now + datetime.timedelta(minutes=rooms[room][dev][1] * 60)
rooms = {
    'bedroom': {'tv': [30, 4],  #possibility to be on, on for how long
                'light': [60, 5],
                'desktop': [60, 2],
                'ac': [20, 8],
                },
    'kitchen': {'freezer': [100, 24],
                'fridge': [100, 24],
                'toaster': [2, 1],
                'microwave': [5, 1],
                'light': [40, 4],
                },
    'office': {'desktop': [40, 3],
                'light': [40, 7],
                'ipad': [20, 2],
                'shredder': [3, 1],
               },
    'bathroom': {'light': [10, 1],
                 'hairdryer': [5, 1],
                 'shaver': [5, 0.5],
                 },
    'livingroom': { 'tv': [20, 4],
                    'xbox': [40, 4],
                    'soundsystem': [50, 5],
                    'light': [70,4],
                    },
}
# (a day, all)
now = start
hour = 24
for room in rooms:
    for dev in rooms[room]:
        now = start
        for i in range(0, (hour * 60) / (rooms[room][dev][1] * 60)):  # a day / time chunk
            if random.random()*100 < rooms[room][dev][0]: # > is off, < is on
                for j in range(0, rooms[room][dev][1]*60): #timechunk to minutes
                    db.data.insert(use_time=now + datetime.timedelta(minutes=j),
                                   room='bedroom',
                                   device=dev,
                                   on_off=1)
            now = now + datetime.timedelta(minutes=rooms[room][dev][1] * 60)
rooms = {
    'bedroom': {'tv': [30, 4],  #possibility to be on, on for how long
                'light': [60, 5],
                'desktop': [60, 2],
                'ac': [20, 8],
                },
    'kitchen': {'freezer': [100, 24],
                'fridge': [100, 24],
                'toaster': [2, 1],
                'microwave': [5, 1],
                'light': [40, 4],
                },
    'office': {'desktop': [40, 3],
                'light': [40, 7],
                'ipad': [20, 2],
                'shredder': [3, 1],
               },
    'bathroom': {'light': [10, 1],
                 'hairdryer': [5, 1],
                 'shaver': [5, 1],
                 },
    'livingroom': { 'tv': [20, 4],
                    'xbox': [40, 4],
                    'soundsystem': [50, 5],
                    'light': [70,4],
                    },
}
db.data.drop()
db.define_table('data',
                Field('use_time', 'datetime'),
                Field('room', 'text'),
                Field('device', 'text'),
                Field('on_off', 'integer')
                )
now = start
hour = 24
for room in rooms:
    for dev in rooms[room]:
        now = start
        for i in range(0, (hour * 60) / (rooms[room][dev][1] * 60)):  # a day / time chunk
            if random.random()*100 < rooms[room][dev][0]: # > is off, < is on
                for j in range(0, rooms[room][dev][1]*60): #timechunk to minutes
                    db.data.insert(use_time=now + datetime.timedelta(minutes=j),
                                   room='bedroom',
                                   device=dev,
                                   on_off=1)
            now = now + datetime.timedelta(minutes=rooms[room][dev][1] * 60)
db(db.data.room=='office').select()
db(db.data.room=='kitchen').select()
db.data.drop()
db.define_table('data',
                Field('use_time', 'datetime'),
                Field('room', 'text'),
                Field('device', 'text'),
                Field('on_off', 'integer')
                )
db.data.drop()
db.define_table('data',
                Field('use_time', 'datetime'),
                Field('room', 'text'),
                Field('device', 'text'),
                Field('on_off', 'integer')
                )
now = start
# (a day, all)
now = start
hour = 24
for room in rooms:
    for dev in rooms[room]:
        now = start
        for i in range(0, (hour * 60) / (rooms[room][dev][1] * 60)):  # a day / time chunk
            if random.random()*100 < rooms[room][dev][0]: # > is off, < is on
                for j in range(0, rooms[room][dev][1]*60): #timechunk to minutes
                    db.data.insert(use_time=now + datetime.timedelta(minutes=j),
                                   room=room,
                                   device=dev,
                                   on_off=1)
            now = now + datetime.timedelta(minutes=rooms[room][dev][1] * 60)
db(db.data.room=='office').select()
tmp = db(db.data.room=='office').select()
print(tmp)
tmp = db(db.data.room=='kitchen').select()
print(tmp)
tmp = db(db.data.room=='kitchen' and db.data.device == 'fridge').select()
tmp
.exit
quit()
import random
import datetime
db = DAL('sqlite://storage.sqlite', pool_size=0)
db
db.data
db._table
db.table
db.tables
db
from gluon import current
current
db.tables
quit()
db = DAL('sqlite://storage.sqlite')
from gluon import current
current.db
db.tables
quit()
db = DAL('sqlite://storage.sqlite')
db.tables
quit()
db.table
db.tables
db.web2py_session_SEAD.drop()
db.device_usage.drop()
db.tables
quit()
db.tables
db.device_usage
db(db.device_usage).select()
now
now = start
hour = 24
for room in rooms:
    for dev in rooms[room]:
        now = start
        for i in range(0, (hour * 60) / (rooms[room][dev][1] * 60)):  # a day / time chunk
            if random.random()*100 < rooms[room][dev][0]: # > is off, < is on
                for j in range(0, rooms[room][dev][1]*60): #timechunk to minutes
                    db.data.insert(use_time=now + datetime.timedelta(minutes=j),
                                   room=room,
                                   device=dev,
                                   on_off=1)
            now = now + datetime.timedelta(minutes=rooms[room][dev][1] * 60)
now = start
hour = 24
for room in rooms:
    for dev in rooms[room]:
        now = start
        for i in range(0, (hour * 60) / (rooms[room][dev][1] * 60)):  # a day / time chunk
            if random.random()*100 < rooms[room][dev][0]: # > is off, < is on
                for j in range(0, rooms[room][dev][1]*60): #timechunk to minutes
                    db.device_usage.insert(use_time=now + datetime.timedelta(minutes=j),
                                   room=room,
                                   device=dev,
                                   on_off=1)
            now = now + datetime.timedelta(minutes=rooms[room][dev][1] * 60)
quit()
db.device_usage(
)
db(db.device_usage).select()
now = start
hour = 24
for room in rooms:
    for dev in rooms[room]:
        now = start
        for i in range(0, (hour * 60) / (rooms[room][dev][1] * 60)):  # a day / time chunk
            if random.random()*100 < rooms[room][dev][0]: # > is off, < is on
                for j in range(0, rooms[room][dev][1]*60): #timechunk to minutes
                    db.device_usage.insert(use_time=now + datetime.timedelta(minutes=j),
                                   room=room,
                                   device=dev,
                                   on_off=1)
            now = now + datetime.timedelta(minutes=rooms[room][dev][1] * 60)
db(db.device_usage).select()
uit()
quit()
db(db.device_usage).select()
quit()
db(db.device_usage).select()
quit()
db(db.device_usage).select()
quit()
db
db.tables
db.device_usage.field
db.device_usage.fields
tmp = db(db.device_usage.use_time < start+datetime.timedelta(days=2))
tmp
print(tmp)
tmp = db(db.device_usage.use_time < start+datetime.timedelta(days=10))
print(tmp)
tmp = db(db.device_usage.room == 'bedroom')
tmp
tmp = db(db.device_usage.use_time < start+datetime.timedelta(days=2)).select
tmp = db(db.device_usage.use_time < start+datetime.timedelta(days=2)).select()
tmp
room = rooms['bedroom']
for dev in two_dev:
    now = start
    for i in range(0, (24*60)/(room[dev][1]*60) ): #a day / time chunk
        if random.random()*100 < room[dev][0]: # > is off, < is on
            for j in range(0, room[dev][1]*60): #timechunk to minutes
                db.device_usage.insert(use_time=now + datetime.timedelta(minutes=j),
                               room='bedroom',
                               device=dev,
                               on_off=1)
        now = now + datetime.timedelta(minutes=room[dev][1] * 60)
db(d.device_usage).select()
tmp = db(db.device_usage).select()
tmp
print(tmp)
db.commit()
quit()
tmp = db(db.device_usage).select()
tmp
quit()
db
now = start
hour = 2*24*365
for room in rooms:
    for dev in rooms[room]:
        now = start
        for i in range(0, (hour * 60) / (rooms[room][dev][1] * 60)):  # a day / time chunk
            if random.random()*100 < rooms[room][dev][0]: # > is off, < is on
                for j in range(0, rooms[room][dev][1]*60): #timechunk to minutes
                    db.device_usage.insert(use_time=now + datetime.timedelta(minutes=j),
                                   room=room,
                                   device=dev,
                                   on_off=1)
            now = now + datetime.timedelta(minutes=rooms[room][dev][1] * 60)
db.commit()
quit()
now = start
hour = 24
for room in rooms:
    for dev in rooms[room]:
        now = start
        for i in range(0, (hour * 60) / (rooms[room][dev][1] * 60)):  # a day / time chunk
            if random.random()*100 < rooms[room][dev][0]: # > is off, < is on
                for j in range(0, rooms[room][dev][1]*60): #timechunk to minutes
                    db.device_usage.insert(use_time=now + datetime.timedelta(minutes=j),
                                   room=room,
                                   device=dev,
                                   on_off=1)
            now = now + datetime.timedelta(minutes=rooms[room][dev][1] * 60)
db.define_table('device_usage',
                Field('use_time', 'datetime'),
                Field('room', 'text'),
                Field('device', 'text'),
                Field('on_off', 'integer')
                )
db.define_table('device_usage2',
                Field('use_time', 'datetime'),
                Field('room', 'text'),
                Field('device', 'text'),
                Field('on_off', 'integer')
                )
now = start
hour = 24
for room in rooms:
    for dev in rooms[room]:
        now = start
        for i in range(0, (hour * 60) / (rooms[room][dev][1] * 60)):  # a day / time chunk
            if random.random()*100 < rooms[room][dev][0]: # > is off, < is on
                for j in range(0, rooms[room][dev][1]*60): #timechunk to minutes
                    db.device_usage2.insert(use_time=now + datetime.timedelta(minutes=j),
                                   room=room,
                                   device=dev,
                                   on_off=1)
            now = now + datetime.timedelta(minutes=rooms[room][dev][1] * 60)
db(db.device_usage).select()
tmp = db(db.device_usage2).select()
print(tmp)
quit()db.tables
db.tables
db.device_usage2.drop()
db.tables
/Users/LinYuAn/Dropbox quit()
quit()
db
db.tables
db.define_table('device_usage1',
                Field('use_time', 'datetime'),
                Field('room', 'text'),
                Field('device', 'text'),
                Field('on_off', 'integer')
                )
now = start
hour = 2*24*30
for room in rooms:
    for dev in rooms[room]:
        now = start
        for i in range(0, (hour * 60) / (rooms[room][dev][1] * 60)):  # a day / time chunk
            if random.random()*100 < rooms[room][dev][0]: # > is off, < is on
                for j in range(0, rooms[room][dev][1]*60): #timechunk to minutes
                    db.device_usage.insert(use_time=now + datetime.timedelta(minutes=j),
                                   room=room,
                                   device=dev,
                                   on_off=1)
            else :
                for j in range(0, rooms[room][dev][1]*60): #timechunk to minutes
                    db.device_usage.insert(use_time=now + datetime.timedelta(minutes=j),
                                   room=room,
                                   device=dev,
                                   on_off=0)
hour = 24!!!
now = start
hour = 2*24*30
for room in rooms:
    for dev in rooms[room]:
        now = start
        for i in range(0, (hour * 60) / (rooms[room][dev][1] * 60)):  # a day / time chunk
            if random.random()*100 < rooms[room][dev][0]: # > is off, < is on
                for j in range(0, rooms[room][dev][1]*60): #timechunk to minutes
                    db.device_usage1.insert(use_time=now + datetime.timedelta(minutes=j),
                                   room=room,
                                   device=dev,
                                   on_off=1)
            else :
                for j in range(0, rooms[room][dev][1]*60): #timechunk to minutes
                    db.device_usage1.insert(use_time=now + datetime.timedelta(minutes=j),
                                   room=room,
                                   device=dev,
                                   on_off=0)
            now = now + datetime.timedelta(minutes=rooms[room][dev][1] * 60)
bedtv2m = db(db.device_usage1.room=='bedroom' and db.device_usage1.device == 'tv')
bedtv2m
bedtv2m = db(db.device_usage1.room=='bedroom' and db.device_usage1.device == 'tv').select()
bedtv2m
print(bedtv2m)
quit()
ls
db.tables
bd.device_usage1
db.device_usage1.drop()
db.tables
db.define_table('device_usage1',
                Field('use_time', 'datetime'),
                Field('room', 'text'),
                Field('device', 'text'),
                Field('on_off', 'integer')
                )
db.executesql('CREATE INDEX ON device_usage1 room')
db.executesql('CREATE INDEX IF NOT EXIST myidx ON device_usage1 room')
db.executesql('CREATE INDEX IF NOT EXISTS myidx ON device_usage1 room')
db.executesql('CREATE INDEX IF NOT EXISTS ON device_usage1 room;')
db.executesql('CREATE INDEX ON device_usage1 room;')
db.executesql('CREATE INDEX IF NOT EXISTS myidx ON device_usage1 room;')
db.tables
db.executesql('CREATE INDEX IF NOT EXISTS myidx ON device_usage1 room ;')
db.executesql('CREATE INDEX IF NOT EXISTS myidx ON device_usage1 room')
db.executesql('CREATE INDEX IF NOT EXISTS myidx ON device_usage1 (room);')
db.executesql('CREATE INDEX IF NOT EXISTS myidx ON device_usage1 (device);')
now = start
hour = 24*30
for room in rooms:
    for dev in rooms[room]:
        now = start
        for i in range(0, (hour * 60) / (rooms[room][dev][1] * 60)):  # a day / time chunk
            if random.random()*100 < rooms[room][dev][0]: # > is off, < is on
                for j in range(0, rooms[room][dev][1]*60): #timechunk to minutes
                    db.device_usage1.insert(use_time=now + datetime.timedelta(minutes=j),
                                   room=room,
                                   device=dev,
                                   on_off=1)
            else :
                for j in range(0, rooms[room][dev][1]*60): #timechunk to minutes
                    db.device_usage1.insert(use_time=now + datetime.timedelta(minutes=j),
                                   room=room,
                                   device=dev,
                                   on_off=0)
            now = now + datetime.timedelta(minutes=rooms[room][dev][1] * 60)
db.commit()
quit()
db.tables
db.define_table('device_usage1',
                Field('use_time', 'datetime'),
                Field('room', 'text'),
                Field('device', 'text'),
                Field('on_off', 'integer')
                )
now = start
hour = 24
for room in rooms:
    for dev in rooms[room]:
        now = start
        for i in range(0, (hour * 60) / (rooms[room][dev][1] * 60)):  # a day / time chunk
            if random.random()*100 < rooms[room][dev][0]: # > is off, < is on
                for j in range(0, rooms[room][dev][1]*60): #timechunk to minutes
                    db.device_usage1.insert(use_time=now + datetime.timedelta(minutes=j),
                                   room=room,
                                   device=dev,
                                   on_off=1)
            else :
                for j in range(0, rooms[room][dev][1]*60): #timechunk to minutes
                    db.device_usage1.insert(use_time=now + datetime.timedelta(minutes=j),
                                   room=room,
                                   device=dev,
                                   on_off=0)
            now = now + datetime.timedelta(minutes=rooms[room][dev][1] * 60)
ls
db.tables
db(db.device_usage1).select()
tmp = db(db.device_usage1).select()
ls
quit()
db.tables
db(db.device_usage).select()
db.executesql('CREATE INDEX IF NOT EXISTS myidx ON device_usage (device);')
db.executesql('CREATE INDEX IF NOT EXISTS myidx ON device_usage (room);')
db.executesql('SELECT * FROM sys.indexes WHERE name="myidx" AND object_id=OBJECT_ID("device_usage")')
db.executesql('SELECT * FROM sys.indexes;')
db.executesql('If IndexProperty(Object_Id("device_usage"), "myidx", "IndexId") Is Null')
db.tables
db.device_usage.drop()
db.define_table('device_usage',
                Field('use_time', 'datetime'),
                Field('room', 'text'),
                Field('device', 'text'),
                Field('on_off', 'integer')
                )
db.executesql('CREATE INDEX IF NOT EXISTS roomidx ON device_usage (room);')
db.executesql('CREATE INDEX IF NOT EXISTS deviceidx ON device_usage (device);')
now = start
hour = 7*24
for room in rooms:
    for dev in rooms[room]:
        now = start
        for i in range(0, (hour * 60) / (rooms[room][dev][1] * 60)):  # a day / time chunk
            if random.random()*100 < rooms[room][dev][0]: # > is off, < is on
                for j in range(0, rooms[room][dev][1]*60): #timechunk to minutes
                    db.device_usage.insert(use_time=now + datetime.timedelta(minutes=j),
                                   room=room,
                                   device=dev,
                                   on_off=1)
            else :
                for j in range(0, rooms[room][dev][1]*60): #timechunk to minutes
                    db.device_usage.insert(use_time=now + datetime.timedelta(minutes=j),
                                   room=room,
                                   device=dev,
                                   on_off=0)
            now = now + datetime.timedelta(minutes=rooms[room][dev][1] * 60)
tmp = db(db.device_usage.room == "bedroom" and db.device_usage.device == 'tv').select()
tmp
print(tmp)
start
start = start + datetime.timedelta(days=7)
start
now = start
hour = 23*24
for room in rooms:
    for dev in rooms[room]:
        now = start
        for i in range(0, (hour * 60) / (rooms[room][dev][1] * 60)):  # a day / time chunk
            if random.random()*100 < rooms[room][dev][0]: # > is off, < is on
                for j in range(0, rooms[room][dev][1]*60): #timechunk to minutes
                    db.device_usage.insert(use_time=now + datetime.timedelta(minutes=j),
                                   room=room,
                                   device=dev,
                                   on_off=1)
            else :
                for j in range(0, rooms[room][dev][1]*60): #timechunk to minutes
                    db.device_usage.insert(use_time=now + datetime.timedelta(minutes=j),
                                   room=room,
                                   device=dev,
                                   on_off=0)
            now = now + datetime.timedelta(minutes=rooms[room][dev][1] * 60)
db.commit()
tmp1 = db(db.device_usage.room == "bedroom" and db.device_usage.device == 'tv').select()
print(tmp1[:100])
print(tmp1[:500])
tmp1
tmp
print(tmp1)
import timeit
t = timeit.Timer(db((db.device_usage.room=="bedroom")&(db.device_usage.device=="tv")).select())
tmp1 = db((db.device_usage.room=="bedroom")&(db.device_usage.device=="tv")).select()
tmp1
print(tmp1[:200])
tmp2 = db((db.device_usage.device=="tv")&(db.device_usage.room=="bedroom")).select()
t = timeit.Timer(db((db.device_usage.room=="bedroom")&(db.device_usage.device=="tv")).select())
def x():
    db((db.device_usage.room=="bedroom")&(db.device_usage.device=="tv")).select()
t = timeit.Timer(lambda: x())
print(t.timeit())
ls
db.device_usage
tmp3 = db((db.device_usage.use_time>datetime.datetime(2015,1,1,0,0))&(db.device_usage.use_time<datetime.datetime(2015,1,2,0,0))&(db.device_usage.device=="tv")&(db.device_usage.room=="bedroom")).select()
tmp3
print(tmp3)
tmp3 = db((db.device_usage.use_time>datetime.datetime(2015,1,1,0,0))&(db.device_usage.use_time<datetime.datetime(2015,1,2,0,0))&(db.device_usage.device=="tv")&(db.device_usage.room=="bedroom")).select()
db.commmit()
db.commit()
quit()
tmp3 = db((db.device_usage.use_time>datetime.datetime(2015,1,1,0,0))&(db.device_usage.use_time<datetime.datetime(2015,1,2,0,0))&(db.device_usage.device=="tv")&(db.device_usage.room=="bedroom")).select()
tmp3
tmp3 = db((db.device_usage.use_time>datetime.datetime(2015,1,4,0,0))&(db.device_usage.use_time<datetime.datetime(2015,1,5,0,0))&(db.device_usage.device=="tv")&(db.device_usage.room=="bedroom")).select()
tmp3
quit()
db.tables
start
genData(365*24, start+datetime.timedelta(years=1))
genData(365*24, start+datetime.timedelta(days=365))
start + datetime.timedelta(days=365)
genData(365*24, start+datetime.timedelta(days=365))
db.commit()
x = db(db.device_usage.use_time<start + datetime.timedelta(days=1))
x = db(db.device_usage)
x
db.device_usage.drop()
quit()
db
db.tables
db(db.device_usage).select()
genData(24, start)
db(db.device_usage).select()
x = db(db.device_usage).select()
x
print(x)
hour = 24
startTime = datetime.datetime(2016,1,1,0,0)
for room in rooms:
    for dev in rooms[room]:
        startnow = startTime
        for i in range(0, (hour * 60) / (rooms[room][dev][1] * 60)):  # a day / time chunk
            if random.random() * 100 < rooms[room][dev][0]:  # > is off, < is on
                for j in range(0, rooms[room][dev][1] * 60):  # timechunk to minutes
                    db.device_usage.insert(use_time=startnow + datetime.timedelta(minutes=j),
                                           room=room,
                                           device=dev,
                                           on_off=1)
            else:
                for j in range(0, rooms[room][dev][1] * 60):  # timechunk to minutes
                    db.device_usage.insert(use_time=startnow + datetime.timedelta(minutes=j),
                                           room=room,
                                           device=dev,
                                           on_off=0)
            startnow = startnow + datetime.timedelta(minutes=rooms[room][dev][1] * 60)
x = db(db.device_usage).select()
print(x)
hour = 24
startTime = datetime.datetime(2016,1,1,0,0)
for room in rooms:
    for dev in rooms[room]:
        startnow = startTime
        for i in range(0, (hour * 60) / (rooms[room][dev][1] * 60)):  # a day / time chunk
            if random.random() * 100 < rooms[room][dev][0]:  # > is off, < is on
                for j in range(0, rooms[room][dev][1] * 60):  # timechunk to minutes
                    db.device_usage.insert(use_time=startnow + datetime.timedelta(minutes=j),
                                           room=room,
                                           device=dev,
                                           on_off=1)
            else:
                for j in range(0, rooms[room][dev][1] * 60):  # timechunk to minutes
                    db.device_usage.insert(use_time=startnow + datetime.timedelta(minutes=j),
                                           room=room,
                                           device=dev,
                                           on_off=0)
                    db.device_usage.insert(use_time=startnow + datetime.timedelta(minutes=j),ASD
d
hour = 25
startTime = datetime.datetime(2016,1,1,0,0)
for room in rooms:
    for dev in rooms[room]:
        startnow = startTime
        for i in range(0, (hour * 60) / (rooms[room][dev][1] * 60)):  # a day / time chunk
            if random.random() * 100 < rooms[room][dev][0]:  # > is off, < is on
                for j in range(0, rooms[room][dev][1] * 60):  # timechunk to minutes
                    db.device_usage.insert(use_time=startnow + datetime.timedelta(minutes=j),
                                           room=room,
                                           device=dev,
                                           on_off=1)
            else:
                for j in range(0, rooms[room][dev][1] * 60):  # timechunk to minutes
                    db.device_usage.insert(use_time=startnow + datetime.timedelta(minutes=j),
                                           room=room,
                                           device=dev,
                                           on_off=0)
            startnow = startnow + datetime.timedelta(minutes=rooms[room][dev][1] * 60)
x = db(db.device_usage).select()
print(x)
quit()
hour = 25
startTime = datetime.datetime(2016,1,1,0,0)
for room in rooms:
    for dev in rooms[room]:
        startnow = startTime
        for i in range(0, (hour * 60) / (rooms[room][dev][1] * 60)):  # a day / time chunk
            if random.random() * 100 < rooms[room][dev][0]:  # > is off, < is on
                for j in range(0, rooms[room][dev][1] * 60):  # timechunk to minutes
                    db.device_usage.insert(use_time=startnow + datetime.timedelta(minutes=j),
                                           room=room,
                                           device=dev,
                                           on_off=1)
            else:
                for j in range(0, rooms[room][dev][1] * 60):  # timechunk to minutes
                    db.device_usage.insert(use_time=startnow + datetime.timedelta(minutes=j),
                                           room=room,
                                           device=dev,
                                           on_off=0)
            startnow = startnow + datetime.timedelta(minutes=rooms[room][dev][1] * 60)
quit()
x = db(db.device_usage).select()
print(x)
quit()
x = db(db.device_usage).select()
print(x)
quit()
hour = 24*365
startTime = datetime.datetime(2016,1,1,0,0)
for room in rooms:
    for dev in rooms[room]:
        startnow = startTime
        for i in range(0, (hour * 60) / (rooms[room][dev][1] * 60)):  # a day / time chunk
            if random.random() * 100 < rooms[room][dev][0]:  # > is off, < is on
                for j in range(0, rooms[room][dev][1] * 60):  # timechunk to minutes
                    db.device_usage.insert(use_time=startnow + datetime.timedelta(minutes=j),
                                           room=room,
                                           device=dev,
                                           on_off=1)
            else:
                for j in range(0, rooms[room][dev][1] * 60):  # timechunk to minutes
                    db.device_usage.insert(use_time=startnow + datetime.timedelta(minutes=j),
                                           room=room,
                                           device=dev,
                                           on_off=0)
            startnow = startnow + datetime.timedelta(minutes=rooms[room][dev][1] * 60)
db.commit()
quit()
db.tables
db(db.device_usage.use_time < datetime.datetime(2016,1,2)).select()
x = db(db.device_usage.use_time < datetime.datetime(2016,1,2)).select()
x
print(x)
x = db(db.device_usage.use_time < datetime.datetime(2016,1,3)).select()
print(x)
x = db(db.device_usage.use_time < datetime.datetime(2016,1,3) & db.device_usage.device == 'light').select()
x = db((db.device_usage.use_time < datetime.datetime(2016,1,3)) & (db.device_usage.device == 'light')).select()
print(x)
quit()
aggregation()
quit()
aggregation()
db.daily_usage.drop()
quit()
db.tables
db(db.daily_usage).select()
aggregation()
db.commit()
db.tables
x = db(db.daily_usage).select()
print(x)
db.commit()
db.tables
countOnTime('bedroom', 'tv', datetime.datetime(2016,1,1),datetime.datetime(2016,1,2))
print(db(db.daily_usage).select())
db(db.daily_usage).select()
quit()
get_oneday("bedroom", "tv", datetime(2016,1,1))
def get_oneday(room, dev, day):
    r = (db.device_usage.room == room)
    d = (db.device_usage.device == dev)
    s = (db.device_usage.use_time >= day)
    e = (db.device_usage.use_time < day+timedelta(days=1))
    rows = db(r & d & s & e).select(orderby=db.daily_usage.use_time)
    return rows
get_oneday("bedroom", "tv", datetime(2016,1,1))
def get_period(room, dev, start, end):
    r = (db.daily_usage.room == room)
    d = (db.daily_usage.device == dev)
    s = (db.daily_usage.use_day >= start)
    e = (db.daily_usage.use_day <= end)
    rows = db(r & d & s & e).select(orderby=db.daily_usage.use_day)
    return rows
get_oneday("bedroom", "tv", datetime(2016,1,1))
get_period("bedroom", "tv", datetime(2016,1,1), datetime(2016,1,3))
db
start
start + timedelta(days=1)
start + datetime.timedelta(days=1)
from datetime import datetime, timedelta
start + datetime.timedelta(days=1)
start + timedelta(days=1)
x = db.device_usage
x
db((x.room=="bedroom")&(x.device=="tv")&(x.usetime >= datetime(2016,1,1))&(x.use_time < datetime(2016,1,3)))
db((x.room=="bedroom")&(x.device=="tv")&(x.use_time >= datetime(2016,1,1))&(x.use_time < datetime(2016,1,3)))
db((x.room=="bedroom")&(x.device=="tv")&(x.use_time >= datetime(2016,1,1))&(x.use_time < datetime(2016,1,3))).select()
y = db((x.room=="bedroom")&(x.device=="tv")&(x.use_time >= datetime(2016,1,1))&(x.use_time < datetime(2016,1,3))).select()
y
print(y)
db.executesql(';')
db.executesql('SELECT DISTINCT room FROM daily_usage;')
tmp = db.executesql('SELECT DISTINCT room FROM device_usage;')
tmp
quit()
db.tables
db.demo_rooms.insert(room='bedroom',icon_p)
db.commit()
db.tables
db.demo_rooms.drop()
db.commit()
quit()
db.tables
quit()
db.demo_rooms.insert(room='bedroom',icon_path='/bedroom.png')
db(db.demo_rooms).select()
print(db(db.demo_rooms).select())
db.demo_rooms.insert(room='bedroom2',icon_path='/bedroom.png')
db(db.demo_rooms).select()
x = db(db.demo_rooms).select()
x
print(x)
db.commit()
response.json()
response.json(dict())
response.json(dict(x))
x
response.json(dict(x=x))
db(db.demo_rooms.room=="bedroom2").delete()
x = db(db.demo_rooms).select()
x
db.demo_rooms.insert(room='kitchen',icon_path='/kitchen.png')
x = db(db.demo_rooms).select()
x
db.demo_rooms.insert(room='office',icon_path='/office.png')
db.demo_rooms.insert(room='bathroom',icon_path='/bathroom.png')
db.demo_rooms.insert(room='livingroom',icon_path='/livingroom.png')
db.commit
db.commit()
db.demo_rooms.drop()
quit()
db.demo_rooms.insert(room='bedroom',icon_path='/bedroom.png', device='tv,light,desktop,ac')
db.demo_rooms.insert(room='kitchen',icon_path='/kitchen.png', device='freezer,fridge,toaster,microwave,light')
db.demo_rooms.insert(room='office',icon_path='/office.png', device='desktop,light,ipad,shredder')
db.demo_rooms.insert(room='bathroom',icon_path='/bathroom.png', device='light,hairdryer,shaver')
db.demo_rooms.insert(room='livingroom',icon_path='/livingroom.png', device='tv,xbox,soundsystem,light')
x = db(db.demo_rooms).select()
print(x)
db.commit()
quit)(
quit()
db.tables
db.demo_rooms.drop()
db.commit()
quit)(
quit()
db.demo_rooms.drop()
db.define_table('demo_rooms',
                Field('room', 'text'),
                Field('icon_path', 'text'),
                Field('device', 'text'),
                Field('mod_header', 'text'),
                )
db.demo_rooms.insert(room='bedroom',
                     icon_path='/bedroom.png',
                     device='tv,light,desktop,ac',
                     mod_header='activity,devices,graph,consumption,notification')
db.demo_rooms.insert(room='kitchen',
                     icon_path='/kitchen.png',
                     device='freezer,fridge,toaster,microwave,light',
                     mod_header='activity,devices,graph,consumption,notification')
db.demo_rooms.insert(room='office',
                     icon_path='/office.png',
                     device='desktop,light,ipad,shredder',
                     mod_header='activity,devices,graph,consumption,notification')
db.demo_rooms.insert(room='bathroom',
                     icon_path='/bathroom.png',
                     device='light,hairdryer,shaver',
                     mod_header='activity,devices,graph,consumption,notification')
db.demo_rooms.insert(room='livingroom',
                     icon_path='/livingroom.png',
                     device='tv,xbox,soundsystem,light',
                     mod_header='activity,devices,graph,consumption,notification')
db.commit()
quit()
db
db.tables
x= db(db.demo_rooms).select()
x
print(x)
db.demo_rooms.drop()
db.define_table('demo_rooms',
                Field('room', 'text'),
                Field('icon_path', 'text'),
                Field('device', 'text'),
                Field('mod_header', 'text'),
                )
db.commit()
quit()
db.tables
quit()
x= db(db.demo_rooms).select()
x
print(x)
User1 = {
    'id' : 0,
    'name' : 'Ewing',
    'email' : 'ylin62@ucsc.edu',
    'rooms' : {
        'bedroom' :
            {
                'icon_path' : '/bedroom.png',
                'device' : 'tv,light,desktop,ac',
                'mod_header' : 'activity,devices,graph,consumption,notification',
            },
        'kitchen' :
            {
                'icon_path' : '/kitchen.png',
                'device' : 'freezer,fridge,toaster,microwave,light',
                'mod_header' : 'activity,devices,graph,consumption,notification',
            }
    }
}
User1
import json
json.load(USer1)
json.load(User1)
json.dump(User1)
json.dumps('asd')
json.dumps(User1)
json.loads(User1)
x = json.dumps(User1)
x
y = json.load(x)
y = json.loads(x)
y
y.id
y['id']
y['email']
response.json(x)
quit()
demo_user
db.tables
json.dumps(demo_user)
x = json.dumps(demo_user)
x
db.user_info.insert(rooms=x,id=0,)
quit()
x = json.dumps(demo_user)
quit()
x = json.dumps(demo_user)
db.user_info.insert(rooms=x,user_id=0,name='Ewing',email='ylin62@ucsc.edu')
db.commit()
quit()
db(db.user_info).select()
x = db(db.user_info).select()
print(x)
import pprint
pprint(x)
pprint.print(x)
print(x)
quit()
x = db(db.user_info).select()
print(x)
db(db.user_info.user_id==0).select()
x = db(db.user_info.user_id==0).select()
print(x)
quit()
x = db(db.user_info.user_id==0).select()
print(x)
db(db.user_info).select()
x = db(db.user_info.user_id==0).select()
x
print(x)
x.rooms
x['rooms']
x[0]['rooms']
xJSON =json.dumps(x[0]['room'])
xJSON =json.dumps(x[0]['rooms'])
xJSON
for key in xJSON:
    print(key)
type(xJSON)
rows = db(db.user_info.user_id==0).select().first() 
rows
row = rows[0]
rows = db(db.user_info.user_id==0).select()
row = rows[0]
row
rowsJSON = json.loads(row['rooms'])
rowsJSON
for key in rowsJSON:
    print(key)
row
row['rooms']
for key in rowsJSON:
  
;
for key in rowsJSON['room']:
     print(key)
for key in rowsJSON['rooms']:
    print(key)
quit)(
quit()
rows = db(db.user_info.user_id==0).select()
row = rows[0]
row['rooms']
row['rooms']
rowsJSON = json.loads(row['rooms'])
rowsJSON
rowsJSON['rooms']
rooms = rowsJSON['rooms']
rooms['device']
rooms
rooms['bedroom']
rooms['device']
quit()
